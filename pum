#!/bin/bash

#echo -e "Prime user management-( PUM :) )\n"
#Variables:
VERSION=1.0.0
unsanitized_client=$2
TELNET_SLEEP_TIME=1
EASYRSA_CERT_EXPIRE=7
PKG="git vim rsync wget bash-completion epel-release firewalld nginx whois"
PKG_AFTER_UPDATE="yum-utils bash-completion-extras htop telnet redis openvpn"
DOCKER_PKG="docker-ce docker-ce-cli containerd.io"
USERNAME="it"
HOSTNAME="node01.primevpn.tk"
GIT_USER="justice"
GIT_PASS="%CC^D)fb6277"
GIT_DIRECT_CREDENTIAL="https://justice:%25CC%5eD%29fb6277@git.primevpn.tk"
PROJECT_PATH="$HOME/project"
PROJECT_NAME="pum"
BRANCH_NAME="production"

usage(){

############################################################
# Help                                                     #
############################################################

   # Display Help
	echo -e "pum(1)\n"
	echo -e "NAME"
	echo -e "	pum - Prime User Management\n"
	echo -e "Syntax: pum [-n|r|l|c|d|cd|rip|vip|br|bs|t|tt|ct|id|pid|i|ns|rtx|npp]\n"
	echo -e "SYNOPSIS"SYNOPSIS
	echo -e "	Short:"
	echo -e "		pum [OPTION...] CLIENT\n"
	echo -e "\n DESCRIPTION"
	echo -e "\n pum user management is a tool for doing all clients :*)"
	echo -e "\n OPTION SUMMARY"
	echo -e "		--new, -n                               Create new client"
	echo -e "		--revoke, -r                            Revoke client"
	echo -e "		--list, -l                              List all created clients"
	echo -e "		--list-connected, -lc, -c               List all connected clients"
	echo -e "		--disconnect, --dc, -d                  disconnect specific client"
	echo -e "		--client-details, -cd                   show all details about specific client."
	echo -e "		--client-real-address, -rip             show client real address"
	echo -e "		--client-virtual-address, -vip          show client virtual address"
	echo -e "		--client-bytes-received, -br            show client bytes RECEIVED TO with hr metrics"
	echo -e "		--client-bytes-send, -bs                show client bytes TRANSMIT FROM with hr metrics"
	echo -e "		--client-connected-since, -t            show pretty connected client time since"
	echo -e "		--client-connected-since-t, -tt         show unit-time of client connected time since"
	echo -e "		--client-connected-time, -ct            show pretty time of client connected to the server"
	echo -e "		--client-id, -id                        show client id"
	echo -e "		--client-peer-id, -pid                  show client peer id"
	echo -e "		--real-time-netspeed, -i                show realtime I/O traffic per second"
	echo -e "		--net-speed, -ns                        show I/O traffic per second"
	echo -e "		-rtx                                    show number of I/O traffic"
	echo -e "		--realtime-netpp, -npp                  show packets transfer realtime"
	echo -e "		--version, -v                           show Version of script"
	echo -e "		--help, -h                              Show help"
	echo

############################################################
############################################################



}


client_name(){
	if [ -z "$unsanitized_client" ]; then
		echo -e "client name not set."
		exit 200
	elif [[ "$unsanitized_client" =~ ^[0-9]{1,3}$ ]]; then
#		echo -e "client name sounds good."
		client=$unsanitized_client
	elif ! [[ "$unsanitized_client" =~ ^[0-9]{1,3}$ ]]; then
#		echo -e "client name not match regex."
		exit 201
	else
		echo -e "I dont think before about it!"
		exit 200
	fi
}
new_client () {

	if [ -e /etc/openvpn/server/easy-rsa/pki/issued/"$client".crt ]; then
	 	echo -e "client exist."
	 	exit 202
	else
		# Generates the custom client.ovpn
		cd /etc/openvpn/server/easy-rsa/ || exit
		EASYRSA_CERT_EXPIRE=$EASYRSA_CERT_EXPIRE ./easyrsa build-client-full "$client" nopass
		{
		cat /etc/openvpn/server/client-common.txt
		echo "<ca>"
		cat /etc/openvpn/server/easy-rsa/pki/ca.crt
		echo "</ca>"
		echo "<cert>"
		sed -ne '/BEGIN CERTIFICATE/,$ p' /etc/openvpn/server/easy-rsa/pki/issued/"$client".crt
		echo "</cert>"
		echo "<key>"
		cat /etc/openvpn/server/easy-rsa/pki/private/"$client".key
		echo "</key>"
		echo "<tls-crypt>"
		sed -ne '/BEGIN OpenVPN Static key/,$ p' /etc/openvpn/server/tc.key
		echo "</tls-crypt>"
		} > ~/"$client".conf

	fi
}

new_client_response(){
    if [ -f ~/"$client".conf ]; then
        base64 ~/"$client".conf
        rm -f ~/"$client".conf
    else
        echo -e "client file not exist."
        exit 203
    fi
}


revoke_client(){
	if ! [ -e /etc/openvpn/server/easy-rsa/pki/issued/"$client".crt ]; then
	 	echo -e "client does not exist."
	 	exit 6
	else
		cd /etc/openvpn/server/easy-rsa/ || exit
		./easyrsa --batch revoke "$client"
		EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl
		rm -f /etc/openvpn/server/crl.pem
		cp /etc/openvpn/server/easy-rsa/pki/crl.pem /etc/openvpn/server/crl.pem
		chown nobody:nobody /etc/openvpn/server/crl.pem
	fi
}

list_client(){
	tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep "^V" | cut -d '=' -f 2
}

get_openvpn_management() {
	local MANAGEMENT_INTERFACE
	MANAGEMENT_INTERFACE=$(grep management /etc/openvpn/server/server.conf)
	local MANAGEMENT_IP
	MANAGEMENT_IP=$(echo "$MANAGEMENT_INTERFACE" | cut -d " " -f2)
	local MANAGEMENT_PORT
	MANAGEMENT_PORT=$(echo "$MANAGEMENT_INTERFACE" | cut -d " " -f3)
	local COUNT_START
	COUNT_START=1
	local COUNT_END
	COUNT_END=$(ip -4 addr | grep inet | cut -d '/' -f 1 | grep -oE '[0-9]{1,3}(\.[0-9]{1,3}){3}' | wc -l)
	local ALL_IP
	ALL_IP=$(ip -4 addr | grep inet | cut -d '/' -f 1 | grep -oE '[0-9]{1,3}(\.[0-9]{1,3}){3}')
	local CHECK_LOCAL_IP
	CHECK_LOCAL_IP=$(echo "$ALL_IP" | grep -E '127(\.[0-9]{1,3}){3}')
	local CHECK_PRIVATE_IP
	CHECK_PRIVATE_IP=$(echo "$ALL_IP" | grep -E '^(10\.|172\.1[6789]\.|172\.2[0-9]\.|172\.3[01]\.|192\.168)')
	local GET_PUBLIC_IP
	GET_PUBLIC_IP=$(grep -m 1 -oE '^[0-9]{1,3}(\.[0-9]{1,3}){3}$' <<< "$(wget -T 10 -t 1 -4qO- "http://ip1.dynupdate.no-ip.com/" || curl -m 10 -4Ls "http://ip1.dynupdate.no-ip.com/")")
	if [ "$MANAGEMENT_INTERFACE" ]; then
#	   	for i in $(seq "$COUNT_START" "$COUNT_END") ; do
#		i=$(ip -4 addr | grep inet | cut -d '/' -f 1 | grep -oE '[0-9]{1,3}(\.[0-9]{1,3}){3}' | sed -n "$i"p)
##		echo -e "$i"
#			if [ "$i" == "$MANAGEMENT_IP" ]; then
#				case $i in
#				"$CHECK_LOCAL_IP")
##					echo -e "ip interface management is local and good."
#					;;
#				"$CHECK_PRIVATE_IP")
##					echo -e "ip interface management is private and not bad."
#					;;
#				"$GET_PUBLIC_IP")
##					echo -e "ip interface management is public and bad."
#					;;
#				*)
#					echo -e "im not think about it before."
#				esac
#			elif [ "$MANAGEMENT_IP" == "0.0.0.0" ]; then
#				echo -e "ip interface management is to 0.0.0.0 and very bad." &> /dev/null
#			else
#				echo -e "management ip is not found on any interface of server"
#			fi
#		done
		FINAL_MANAGEMENT_IP=$(grep management /etc/openvpn/server/server.conf | cut -d " " -f2)
		FINAL_MANAGEMENT_PORT=$(grep management /etc/openvpn/server/server.conf | cut -d " " -f3)
	elif [ "$MANAGEMENT_INTERFACE" == "0.0.0.0" ];then
		FINAL_MANAGEMENT_IP="127.0.0.1"
		FINAL_MANAGEMENT_PORT=$(grep management /etc/openvpn/server/server.conf | cut -d " " -f3)
	else
		echo -e "Openvpn interface management is not set."
		exit 8
	fi
}

openvpn_management(){
    local HOST
	HOST="$FINAL_MANAGEMENT_IP $FINAL_MANAGEMENT_PORT"
	local COMMAND
	COMMAND="$1"

    echo "$COMMAND" | nc -N localhost 5555
}


#is_client_connected(){
#    if [ -z "$openvpn_management" ]; then
#    fi
#}

Telnet(){
	get_openvpn_management
	local HOST
	HOST="$FINAL_MANAGEMENT_IP $FINAL_MANAGEMENT_PORT"
	echo "HOST: $HOST"
	local STATUS_CMD
	STATUS_CMD="$1"
	(
		echo open "$HOST"
		sleep "$TELNET_SLEEP_TIME"
		echo "$STATUS_CMD"
		sleep $TELNET_SLEEP_TIME
#		echo "exit"
		) | telnet #&> /dev/null

}

disconnect_client(){
    get_result=$(openvpn_management "kill $client")
}

connected_clients(){
    get_result=$(openvpn_management status | grep CLIENT_LIST)
}

client_details(){
    get_result=$(openvpn_management status | grep "CLIENT_LIST,$client,")
}

client_real_address(){
	get_result=$(openvpn_management status | grep "CLIENT_LIST,$client," | cut -d "," -f3)
}

client_virtual_address(){
	get_result=$(openvpn_management status | grep "CLIENT_LIST,$client," | cut -d "," -f4)
}

client_bytes_received(){
	local CALCULATE_BYTES
	CALCULATE_BYTES=$(openvpn_management status | grep "CLIENT_LIST,$client," | cut -d "," -f6)
	if [ -z "$CALCULATE_BYTES" ]; then
		echo -e "Client: $client Not Connected."
	elif [ "$CALCULATE_BYTES" -lt 1000 ]; then
	    echo -e "$CALCULATE_BYTES bytes"
	elif [ "$CALCULATE_BYTES" -ge 1000 ] && [ "$CALCULATE_BYTES" -lt 1000000 ]; then
		CALCULATE_BYTES=$((CALCULATE_BYTES/1000))
		echo -e "$CALCULATE_BYTES Kilobyte"
	elif [ "$CALCULATE_BYTES" -ge 1000000 ] && [ "$CALCULATE_BYTES" -lt 1000000000 ]; then
		CALCULATE_BYTES=$((CALCULATE_BYTES/1000000))
		echo -e "$CALCULATE_BYTES Megabyte"
	elif [ "$CALCULATE_BYTES" -ge 1000000000 ] && [ "$CALCULATE_BYTES" -lt 1000000000000 ]; then
		CALCULATE_BYTES=$((CALCULATE_BYTES/1000000000))
		echo -e "$CALCULATE_BYTES Gigabyte"
	else
		echo -e "Fuck You $client"
	fi
}

client_bytes_send(){
	local CALCULATE_BYTES
	CALCULATE_BYTES=$(openvpn_management status | grep "CLIENT_LIST,$client," | cut -d "," -f7)
	if [ -z "$CALCULATE_BYTES" ]; then
		echo -e "Client: $client Not Connected."
	elif [ "$CALCULATE_BYTES" -lt 1000 ]; then
	    echo -e "$CALCULATE_BYTES bytes"
	elif [ "$CALCULATE_BYTES" -ge 1000 ] && [ "$CALCULATE_BYTES" -lt 1000000 ]; then
		CALCULATE_BYTES=$((CALCULATE_BYTES/1000))
		echo -e "$CALCULATE_BYTES Kilobyte"
	elif [ "$CALCULATE_BYTES" -ge 1000000 ] && [ "$CALCULATE_BYTES" -lt 1000000000 ]; then
		CALCULATE_BYTES=$((CALCULATE_BYTES/1000000))
		echo -e "$CALCULATE_BYTES Megabyte"
	elif [ "$CALCULATE_BYTES" -ge 1000000000 ] && [ "$CALCULATE_BYTES" -lt 1000000000000 ]; then
		CALCULATE_BYTES=$((CALCULATE_BYTES/1000000000))
		echo -e "$CALCULATE_BYTES Gigabyte"
	else
		echo -e "Fuck You $client"
	fi
}

client_connected_since(){
	get_result=$(openvpn_management status | grep "CLIENT_LIST,$client," | cut -d "," -f8)
}

client_connected_since_t(){
	get_result=$(openvpn_management status | grep "CLIENT_LIST,$client," | cut -d "," -f9)
}

client_connected_time(){
    while true; do
        local CURRENT_UNIX_TIME
        CURRENT_UNIX_TIME=$(date +%s)
    #	echo -e "CURRENT_UNIX_TIME: $CURRENT_UNIX_TIME"
        local CONNECTED_SINCE
        client_connected_since_t
        CONNECTED_SINCE=$(show_result)
    #	show_result
    #	is_client_connected
    #	echo -e "CONNECTED_SINCE: $CONNECTED_SINCE"
        local CONNECTED_TIME_REMAIN CONNECTED_TIME_SECOND CONNECTED_TIME_MINUTE CONNECTED_TIME_HOUR
        if [[ "$CONNECTED_SINCE" != *"Not connected."* ]]; then
            if [ "$CURRENT_UNIX_TIME" -ge "$CONNECTED_SINCE" ]; then
                local CONNECTED_TIME
                CONNECTED_TIME_SECOND=$((CURRENT_UNIX_TIME-CONNECTED_SINCE))

                if [ "$CONNECTED_TIME_SECOND" -lt 60 ] && [ "$CONNECTED_TIME_SECOND"  ]; then

                    if [ "$CONNECTED_TIME_SECOND" -lt 10 ]; then
                        echo -ne "00:00:0$CONNECTED_TIME_SECOND\033[0K\r"
                    else
                        echo -ne "00:00:$CONNECTED_TIME_SECOND\033[0K\r"
                    fi


                elif [ "$CONNECTED_TIME_SECOND" -ge 60 ] && [ "$CONNECTED_TIME_SECOND" -lt 3600 ]; then
                    CONNECTED_TIME_SECOND=$((CONNECTED_TIME_SECOND%60))
                    CONNECTED_TIME_MINUTE=$((CONNECTED_TIME_SECOND/60))

                    if [ "$CONNECTED_TIME_MINUTE" -lt 10 ] && [ "$CONNECTED_TIME_SECOND" -lt 10 ]; then
                        echo -ne "00:0$CONNECTED_TIME_MINUTE"":""0$CONNECTED_TIME_SECOND\033[0K\r"
                    elif [ "$CONNECTED_TIME_MINUTE" -lt 10 ] && [ "$CONNECTED_TIME_SECOND" -ge 10 ]; then
                        echo -ne "00:0$CONNECTED_TIME_MINUTE"":""$CONNECTED_TIME_SECOND\033[0K\r"
                    elif [ "$CONNECTED_TIME_MINUTE" -ge 10 ] && [ "$CONNECTED_TIME_SECOND" -ge 10 ]; then
                        echo -ne "00:$CONNECTED_TIME_MINUTE"":""$CONNECTED_TIME_SECOND\033[0K\r"
                    fi
#                    echo -ne "00:""$CONNECTED_TIME"":""$CONNECTED_TIME_REMAIN\033[0K\r"


                elif [ "$CONNECTED_TIME_SECOND" -ge 3600 ] && [ "$CONNECTED_TIME_SECOND" -lt 86400 ]; then
                    CONNECTED_TIME_MINUTE=$((CONNECTED_TIME_SECOND/60%60))
                    CONNECTED_TIME_SECOND=$((CONNECTED_TIME_MINUTE%60))
                    CONNECTED_TIME_HOUR=$((CONNECTED_TIME_SECOND/3600))

                    if [ "$CONNECTED_TIME_HOUR" -lt 10 ] && [ "$CONNECTED_TIME_MINUTE" -lt 10 ] && [ "$CONNECTED_TIME_SECOND" -lt 10 ]; then
                        echo -ne "0$CONNECTED_TIME_HOUR"":""0$CONNECTED_TIME_MINUTE"":""0$CONNECTED_TIME_SECOND\033[0K\r"

                    elif [ "$CONNECTED_TIME_HOUR" -lt 10 ] && [ "$CONNECTED_TIME_MINUTE" -lt 10 ] && [ "$CONNECTED_TIME_SECOND" -ge 10 ]; then
                        echo -ne "0$CONNECTED_TIME_HOUR"":""0$CONNECTED_TIME_MINUTE"":""$CONNECTED_TIME_SECOND\033[0K\r"

                    elif [ "$CONNECTED_TIME_HOUR" -lt 10 ] && [ "$CONNECTED_TIME_MINUTE" -ge 10 ] && [ "$CONNECTED_TIME_SECOND" -lt 10 ]; then
                        echo -ne "0$CONNECTED_TIME_HOUR"":""$CONNECTED_TIME_MINUTE"":""0$CONNECTED_TIME_SECOND\033[0K\r"

                    elif [ "$CONNECTED_TIME_HOUR" -lt 10 ] && [ "$CONNECTED_TIME_MINUTE" -ge 10 ] && [ "$CONNECTED_TIME_SECOND" -ge 10 ]; then
                        echo -ne "0$CONNECTED_TIME_HOUR"":""$CONNECTED_TIME_MINUTE"":""$CONNECTED_TIME_SECOND\033[0K\r"

                    elif [ "$CONNECTED_TIME_HOUR" -ge 10 ] && [ "$CONNECTED_TIME_MINUTE" -lt 10 ] && [ "$CONNECTED_TIME_SECOND" -lt 10 ]; then
                        echo -ne "$CONNECTED_TIME_HOUR"":""0$CONNECTED_TIME_MINUTE"":""0$CONNECTED_TIME_SECOND\033[0K\r"

                    elif [ "$CONNECTED_TIME_HOUR" -ge 10 ] && [ "$CONNECTED_TIME_MINUTE" -lt 10 ] && [ "$CONNECTED_TIME_SECOND" -ge 10 ]; then
                        echo -ne "$CONNECTED_TIME_HOUR"":""0$CONNECTED_TIME_MINUTE"":""$CONNECTED_TIME_SECOND\033[0K\r"

                    elif [ "$CONNECTED_TIME_HOUR" -ge 10 ] && [ "$CONNECTED_TIME_MINUTE" -ge 10 ] && [ "$CONNECTED_TIME_SECOND" -lt 10 ]; then
                        echo -ne "$CONNECTED_TIME_HOUR"":""$CONNECTED_TIME_MINUTE"":""0$CONNECTED_TIME_SECOND\033[0K\r"

                    elif [ "$CONNECTED_TIME_HOUR" -ge 10 ] && [ "$CONNECTED_TIME_MINUTE" -ge 10 ] && [ "$CONNECTED_TIME_SECOND" -ge 10 ]; then
                        echo -ne "$CONNECTED_TIME_HOUR"":""$CONNECTED_TIME_MINUTE"":""$CONNECTED_TIME_SECOND\033[0K\r"
                    fi
#                    echo -ne "$CONNECTED_TIME_HOUR"":""$CONNECTED_TIME_MINUTE"":00\033[0K\r"
#                elif [ "$CONNECTED_TIME" -ge 86400 ]; then
#                    CONNECTED_TIME_REMAIN=$((CONNECTED_TIME/24/60%60))
#                    CONNECTED_TIME=$((CONNECTED_TIME/86400))
#                    echo -ne "$CONNECTED_TIME""-""$CONNECTED_TIME_REMAIN"":00:00\033[0K\r"
                fi
            else
                show_result
            fi
        fi
    done
}

connected_clients_number(){
    get_result=$(openvpn_management status | grep -c CLIENT_LIST)
}

realtime_netspeed(){
	local R1 T1 R2 T2 TBPS RBPS INTERFACE txMETRIC rxMETRIC
	INTERFACE=$1
	while true
	do
			R1=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_bytes)
			T1=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_bytes)
			sleep 1
			R2=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_bytes)
			T2=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_bytes)
			TBPS=$((T2-T1))
			RBPS=$((R2-R1))

			if [ -z "$TBPS" ]; then
				echo -e "Can't get "transmit to" this server.."
			elif [ "$TBPS" -lt 1024 ]; then
				txMETRIC="B/S"
			elif [ "$TBPS" -ge 1024 ] && [ "$TBPS" -lt 1048576 ]; then
				TBPS=$((TBPS/1024))
				txMETRIC="KB/S"
			elif [ "$TBPS" -ge 1048576 ] && [ "$TBPS" -lt 1073741824 ]; then
				TBPS=$((TBPS/1048576))
				txMETRIC="MB/S"
			elif [ "$TBPS" -ge 1073741824 ] && [ "$TBPS" -lt 1099511627776 ]; then
				TBPS=$((TBPS/1073741824))
				txMETRIC="GB/S"
			else
				echo -e "Fuck You $TBPS"
			fi

			if [ -z "$RBPS" ]; then
				echo -e "Can't get "receive From" this server.."
			elif [ "$RBPS" -lt 1000 ]; then
				rxMETRIC="B/S"
			elif [ "$RBPS" -ge 1000 ] && [ "$RBPS" -lt 1048576 ]; then
				RBPS=$((RBPS/1000))
				rxMETRIC="KB/S"
			elif [ "$RBPS" -ge 1048576 ] && [ "$RBPS" -lt 1073741824 ]; then
				RBPS=$((RBPS/1048576))
				rxMETRIC="MB/S"
			elif [ "$RBPS" -ge 1073741824 ] && [ "$RBPS" -lt 1099511627776 ]; then
				RBPS=$((RBPS/1073741824))
				rxMETRIC="GB/S"
			else
				echo -e "Fuck You $RBPS"
			fi

			echo -ne "tx $INTERFACE: $TBPS $txMETRIC rx $INTERFACE: $RBPS $rxMETRIC \033[0K\r"
	done
}

netSpeed(){
    while true; do
      	local R1 T1 R2 T2 TBPS RBPS TKBPS RKBPS INTERFACE
	    INTERFACE=$1
            R1=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_bytes)
            T1=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_bytes)
            sleep 1
            R2=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_bytes)
            T2=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_bytes)
            TBPS=$((T2-T1))
            RBPS=$((R2-R1))
            TKBPS=$((TBPS/1024))
            RKBPS=$((RBPS/1024))
            echo -ne "tx $INTERFACE: $TKBPS kB/s rx $INTERFACE: $RKBPS kB/s \033[0K\r"
    done

}
RKBPS(){
    while true; do
        local R1 T1 R2 T2 TBPS RBPS TKBPS RKBPS INTERFACE
        INTERFACE=$1
                R1=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_bytes)
#                T1=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_bytes)
                sleep 1
                R2=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_bytes)
#                T2=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_bytes)
#                TBPS=$((T2-T1))
                RBPS=$((R2-R1))
#                TKBPS=$((TBPS/1024))
                RKBPS=$((RBPS/1024))
                echo -ne "$RBPS \033[0K\r"
	done
}
TKBPS(){
    while true; do
        local R1 T1 R2 T2 TBPS RBPS TKBPS RKBPS INTERFACE
        INTERFACE=$1
#                R1=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_bytes)
                T1=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_bytes)
                sleep 1
#                R2=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_bytes)
                T2=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_bytes)
                TBPS=$((T2-T1))
#                RBPS=$((R2-R1))
                TKBPS=$((TBPS/1024))
#                RKBPS=$((RBPS/1024))
                echo -ne "$TKBPS \033[0K\r"
	done
}

RTKBPS(){
    while true; do
        local R1 T1 R2 T2 TBPS RBPS TKBPS RKBPS INTERFACE
        INTERFACE=$1
                R1=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_bytes)
                T1=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_bytes)
                sleep 1
                R2=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_bytes)
                T2=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_bytes)
                TBPS=$((T2-T1))
                RBPS=$((R2-R1))
                TKBPS=$((TBPS/1024))
                RKBPS=$((RBPS/1024))
                echo -ne "$RKBPS\t$TKBPS \033[0K\r"
	done
}


RTKBPS_client(){
    while true; do

        local R1 T1 R2 T2 TBPS RBPS TKBPS RKBPS

                R1=$(openvpn_management status | grep "CLIENT_LIST,$client," | cut -d "," -f6)
                T1=$(openvpn_management status | grep "CLIENT_LIST,$client," | cut -d "," -f7)
                sleep 1
                R2=$(openvpn_management status | grep "CLIENT_LIST,$client," | cut -d "," -f6)
                T2=$(openvpn_management status | grep "CLIENT_LIST,$client," | cut -d "," -f7)
                TBPS=$((T2-T1))
                RBPS=$((R2-R1))
                TKBPS=$((TBPS/1024))
                RKBPS=$((RBPS/1024))
                echo -ne "$RKBPS\t$TKBPS \033[0K\r"

                if [ -z "$R1" ] || [ -z "$T1" ]; then
                    echo -e "Client: $client Not connected."
                    exit 10
                fi
	done
}

RTKBPS-NOW(){
    local R1 T1 R2 T2 TBPS RBPS TKBPS RKBPS INTERFACE MODE
    MODE=$2
    INTERFACE=$1
            R1=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_bytes)
            T1=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_bytes)
            sleep 1
            R2=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_bytes)
            T2=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_bytes)
            TBPS=$((T2-T1))
            RBPS=$((R2-R1))
            TKBPS=$((TBPS/1000))
            RKBPS=$((RBPS/1000))

            echo -e "$RBPS,$TBPS"
}

netpp(){
	local R1 T1 R2 T2 TXPPS RXPPS INTERFACE
	INTERFACE=$1
while true
do
        R1=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_packets)
        T1=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_packets)
        sleep 1
        R2=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_packets)
        T2=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_packets)
        TXPPS=$((T2-T1))
        RXPPS=$((R2-R1))
        echo -ne "tx $1: $TXPPS pkts/s rx $1: $RXPPS pkts/s \033[0K\r"
done
}

client_country(){
    client_name
    local client_address
    client_real_address
    client_address=$(show_result | cut -d":" -f1)
    whois "$client_address" | grep -i country | cut -d" " -f9 | head -n1
}

client_id(){
	Telnet status | grep "CLIENT_LIST,$client," | cut -d "," -f11
}

client_peer_id(){
	Telnet status | grep "CLIENT_LIST,$client," | cut -d "," -f12
}

UPDATE() {
    local YUM_UPDATE
	YUM_UPDATE="$($1 2> err.txt)"
	if [ "$YUM_UPDATE" ]; then
		echo -e "System successfully updated.\n"
	else
		echo -e "System not successfully updated, find error log in /root/err.txt\n"
	fi
}

INSTALL_PKG(){

if [ -n "$1" ]; then
    local PKG
    PKG="$1"
fi
    for p in $PKG
    do
        echo -e "Installing $p package..."
        local IS_PKG_INSTALLED
    	IS_PKG_INSTALLED=$(yum list installed | grep "$p")
    	if [ "$IS_PKG_INSTALLED" ]; then
    	    echo -e "$p was Installed before.\n"
    	else
    	    local IS_PACKAGE_INSTALLED_SUCCESSFULLY
    		IS_PACKAGE_INSTALLED_SUCCESSFULLY=$(yum install -y "$p" 1>> out.txt 2>> err.txt)
    		if [ "$IS_PACKAGE_INSTALLED_SUCCESSFULLY" ]; then
    			echo -e "$p successfully installed\n"
    		else
    			echo -e "$p does not successfully installed.\n"
    		fi
    	fi
    done

}

OPEN_FIREWALL(){
    local FIREWALLD_STATUS
    FIREWALLD_STATUS="$(systemctl status firewalld.service)"
    if [ "$FIREWALLD_STATUS" ]; then
        case $1 in
        --port)
            firewall-cmd --permanent --zone=public --add-port="$2"/"$3"
            firewall-cmd --reload
            ;;
        --service)
            fierwall-cmd --permanent --zone-public --add-service="$2"
            firewall-cmd --reload
            ;;
        --rich-rule)
            firewall-cmd --permanent --zone=public --add-rich-rule="rule family=ipv4 \
            source address='$2'\
            destination address='$3' \
            port port='$4' protocol='$5' accept"
            firewall-cmd --reload
            ;;
        esac
    fi
}

set_hostname(){
    hostnamectl set-hostname "$1"
}

git_credential(){
#$1 add or remove
#$2 local or global
#$3 git username
#$4 git password
#$5 path of git direct credential
#$6 path of project
#$7 project name
	case $1 in
	--add|-a)
	  	if [ "$2" == "local" ]; then
			git config user.name "$3"
			git config user.password "$4"
			local IS_GIT_DIRECT_CREDENTIALS_EXIST
			IS_GIT_DIRECT_CREDENTIALS_EXIST=$(grep "$5" "$HOME"/.git-credentials)
			if [ -f "$HOME"/.git-credentials ] && [ "$IS_GIT_DIRECT_CREDENTIALS_EXIST" ]; then
				echo -e "git-credentials is exist on $HOME/.git-credentials"
			else
				echo -e "$GIT_DIRECT_CREDENTIAL" >> "$HOME"/.git-credentials
			fi
		elif [ "$2" == "global" ]; then
			git config --global user.name "$3"
			git config --global user.password "$4"
			local IS_GIT_DIRECT_CREDENTIALS_EXIST
			IS_GIT_DIRECT_CREDENTIALS_EXIST=$(grep "$5" "$HOME"/.git-credentials)
			if [ -f "$HOME"/.git-credentials ] && [ "$IS_GIT_DIRECT_CREDENTIALS_EXIST" ]; then
				echo -e "git-credentials is exist on $HOME/.git-credentials"
			else
				echo -e "$5" >> "$HOME"/.git-credentials
			fi
		fi
	  ;;
	--remove|-rm)
		if [ "$2" == "local" ]; then
			sed -i '/user/d' "$6"/"$7"/.git/config &> /dev/null
			sed -i "/$3/d" "$6"/"$7"/.git/config &> /dev/null
			sed -i "/$4/d" "$6"/"$7"/.git/config &> /dev/null
			sed -i "/$5/d" "$HOME/.git-credentials" &> /dev/null
		elif [ "$2" == "global" ]; then
			sed -i "/$GIT_USER/d" "$HOME/.git-credentials" &> /dev/null
			sed -i "/$GIT_PASS/d" "$HOME/.git-credentials" &> /dev/null
			sed -i "/$5/d" "$HOME/.git-credentials" &> /dev/null
		fi
	  ;;
	esac
}

git_pull(){
    local PROJECT_PATH
    PROJECT_PATH="$1"
    local PROJECT_NAME
    PROJECT_NAME="$2"
    local BRANCH_NAME
    BRANCH_NAME="$3"

    if ! [ -d "$PROJECT_PATH" ]; then
        mkdir "$PROJECT_PATH"
    fi
    if [ -d "$PROJECT_PATH" ]; then
        if [ -d "$PROJECT_PATH/$PROJECT_NAME" ]; then
            cd "$PROJECT_PATH/$PROJECT_NAME" || exit
		    local IS_CORRECT_BRANCH
		    IS_CORRECT_BRANCH=$(git branch -a | grep "$BRANCH_NAME" | grep -F '*')
		    if [ "$IS_CORRECT_BRANCH" ]; then
		        git pull origin "$BRANCH_NAME"
		    else
		        git checkout origin/"$BRANCH_NAME"
		        git pull origin "$BRANCH_NAME"
		    fi
		else
		    mkdir -p "$PROJECT_PATH/$PROJECT_NAME"
            cd "$PROJECT_PATH/$PROJECT_NAME" || exit
		    local IS_CORRECT_BRANCH
		    IS_CORRECT_BRANCH=$(git branch -a | grep "$BRANCH_NAME" | grep -F '*')
		    if [ "$IS_CORRECT_BRANCH" ]; then
		        git pull origin "$BRANCH_NAME"
		    else
		        git checkout origin/"$BRANCH_NAME"
		        git pull origin "$BRANCH_NAME"
		    fi
        fi
    fi
}

install_project(){
    local PROJECT_PATH
    PROJECT_PATH="$1"
    local PROJECT_NAME
    PROJECT_NAME="$2"
    cd "$PROJECT_PATH/$PROJECT_NAME" || exit
    cp "$PROJECT_NAME" /usr/local/bin/"$PROJECT_NAME"
    ln -s "$PROJECT_PATH"/"$PROJECT_NAME"/"$PROJECT_NAME" /bin/"$PROJECT_NAME"
    chmod +x /usr/local/bin/"$PROJECT_NAME"
}
create_systemd_unit(){
    local PROJECT_NAME
    PROJECT_NAME="$1"
    local IS_UNIT_EXIST
    IS_UNIT_EXIST="$(systemctl cat "$PROJECT_NAME".service)"
    if ! [ "$IS_UNIT_EXIST" ]; then
        echo -e "
            [Unit]
            Description=$PROJECT_NAME systemd service unit file.

            [Service]
            ExecStart=/bin/bash $PROJECT_NAME

            [Install]
            WantedBy=multi-user.target " > /etc/systemd/system/"$PROJECT_NAME".service
        systemctl daemon-reload
        systemctl enable --now "$PROJECT_NAME".service
    else
        local IS_UNIT_ACTIVE
        IS_UNIT_ACTIVE="$(systemctl status "$PROJECT_NAME".service)"
        if ! [ "$IS_UNIT_ACTIVE" ]; then
            systemctl enable --now "$PROJECT_NAME".service
            IS_UNIT_ACTIVE="$(systemctl status "$PROJECT_NAME".service)"
            if ! [ "$IS_UNIT_ACTIVE" ]; then
                echo -e "there was a problem with $PROJECT_NAME service."
            fi
        else
            echo -e "$PROJECT_NAME is active"
        fi
    fi

}

run-command(){
    /bin/bash "$@"
}

show_result(){
    local cn cs ri br bs
#    echo -e "$get_result"
#    str="ERROR: common name"
    if [[ "$get_result" == *"ERROR: common name"* ]] ; then
        echo -e "Client: $client Not connected."
        exit 10
    elif [[ "$get_result" == *"client(s) killed"* ]]; then
        echo -e "Client: $client Disconnected."
        exit 0
    elif [[ "$get_result" == *"CLIENT_LIST,$client"* ]]; then
        cn=$(echo "$get_result" | cut -d"," -f2)
        ri=$(echo "$get_result" | cut -d"," -f3)
        br=$(echo "$get_result" | cut -d"," -f6)
        br=$((br/1000))
        bs=$(echo "$get_result" | cut -d"," -f7)
        bs=$((bs/1000))
#        echo -e "Client Name\t Client Connected Since\n"
        echo -e "$cn,$ri,$br,$bs"
#        paste <(printf %s "$cn") <(printf %s "$cs")
        exit
    elif [[ "$get_result" == *"CLIENT_LIST,"* ]]; then
        cn=$(echo "$get_result" | cut -d"," -f2 | tail -n +2)
        cs=$(echo "$get_result" | cut -d"," -f8 | tail -n +2)
        echo -e "Client Name\t Client Connected Since\n"
        paste <(printf %s "$cn") <(printf %s "$cs")
        exit
	elif [ -n "$get_result" ]; then
	    echo -e "$get_result"
	else
	    echo -e "else- Client: $client Not connected."
	fi
}

cpu_utilization_percentage(){
    awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else print ($2+$4-u1) * 100 / (t-t1) "%"; }' \
    <(grep 'cpu ' /proc/stat) <(sleep 1;grep 'cpu ' /proc/stat)
}

memory_status(){
    local status sub_status
    sub_status=$1
    status=$(free -k | grep Mem)
    if [ "$sub_status" == "total" ]; then
        echo "$status" | awk '{print $2}'
    elif [ "$sub_status" == "used" ]; then
        echo "$status" | awk '{print $3}'
    elif [ "$sub_status" == "available" ]; then
        echo "$status" | awk '{print $7}'
    else
        echo -e "You must enter correct argument"
    fi
}

redis_collect(){
    local cpu total_memory used_memory available_memory client_number rtx rx tx JSON_FMT JSON
    cpu=$(cpu_utilization_percentage)
    total_memory=$(memory_status total)
    used_memory=$(memory_status used)
    available_memory=$(memory_status available)
    connected_clients_number
    client_number=$(show_result)
    rtx=$(RTKBPS-NOW tun0)
    rx=$(echo "$rtx" | cut -d"," -f1)
    tx=$(echo "$rtx" | cut -d"," -f2)
#    echo -e "CPU:              $cpu"
#    echo -e "Total memory:     $total_memory"
#    echo -e "Used memory:      $used_memory"
#    echo -e "Available memory: $available_memory"
#    echo -e "Client Number:    $client_number"
#    echo -e "RX:               $rx"
#    echo -e "TX:               $tx"

    JSON_FMT='{"cpu":"%s","total_memory":"%s","used_memory":"%s","available_memory":"%s","client_number":"%s","rx":"%s","tx":"%s"}\n'
    JSON=$(printf "$JSON_FMT" "$cpu" "$total_memory" "$used_memory" "$available_memory" "$client_number" "$rx" "$tx")
#    redis-cli -x set info "$JSON"
    JSON=$(echo -e "$JSON" | base64)
#    echo "$JSON"
    redis-cli set info "$JSON"
#    sed 's/\\/ /g' | redis-cli -x set info2
}

test_fun(){
    while true;do
        for i in {1..10}
        do
            local R1 T1 R2 T2 TBPS RBPS TKBPS RKBPS INTERFACE
            INTERFACE="$1"
                R1=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_bytes)
                T1=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_bytes)
                sleep 1
                R2=$(cat /sys/class/net/"$INTERFACE"/statistics/rx_bytes)
                T2=$(cat /sys/class/net/"$INTERFACE"/statistics/tx_bytes)
                TBPS=$((T2-T1))
                RBPS=$((R2-R1))
                TKBPS=$((TBPS/1024))
                RKBPS=$((RBPS/1024))
                echo -ne "$RKBPS,$TKBPS \033[0K\r"
            if [ "$i" -eq 10 ]; then
                exit 222
            fi

        done
done
}

case $1 in
	-n|--new)
		client_name
		new_client &> /dev/null
		new_client_response
		exit 0
	;;
	-r|--revoke)
		client_name
		revoke_client &> /dev/null
		exit 0
	;;
	-l|--list)
		list_client
		exit 0
		;;
	-c|-lc|--list-connected)
		connected_clients
		show_result
		;;
	-d|--dc|--disconnect)
		client_name
#		revoke_client
		disconnect_client
		show_result
		;;
	-b|--ban)
		client_name
		revoke_client
		disconnect_client
		show_result
		;;
	-cd|--client-details)
		client_name
		client_details
		show_result
		;;
	-rip|--client-real-address)
		client_name
		client_real_address
		;;
	-vip|--client-virtual-address)
		client_name
		client_virtual_address
		;;
	-br|--client-bytes-received)
		client_name
		client_bytes_received
		;;
	-bs|--client-bytes-send)
		client_name
		client_bytes_send
		;;
	-t|--client-connected-since)
		client_name
		client_connected_since
		show_result
		;;
	-tt|--client-connected-since-t)
		client_name
		client_connected_since_t
		;;
	-ct|--client-connected-time)
		client_name
		client_connected_time
		;;
	-id|--client-id)
		client_name
		client_id
		;;
	-pid|--client-peer-id)
		client_name
		client_peer_id
		;;
	-i|--realtime-netspeed)
		realtime_netspeed "$2"
		;;
	-ns|--netspeed)
		netSpeed "$2"
		;;
	-rx)
		RKBPS "$2"
		;;
	-tx)
		TKBPS "$2"
		;;
	-rtx)
		RTKBPS "$2"
		;;
	-rtx-c)
	    client_name
		RTKBPS_client
		;;
	-npp|--realtime-netpp)
		netpp "$2"
		;;
    -cc|--client-country)
        client_country
        ;;
    --update-os)
        UPDATE "yum update -y"
        ;;
    --install-packages)
        INSTALL_PKG "$2"
        ;;
    --open-firewall)
        OPEN_FIREWALL "$2" "$3" "$4" "$5" "$6"
        ;;
    --set-hostname)
        set_hostname "$2"
        ;;
    --set-git-cred)
        git_credential --add "$2" "$GIT_USER" "$GIT_PASS" "$GIT_DIRECT_CREDENTIAL"
        ;;
    --remove-git-cred)
        git_credential --remove "$2" "$GIT_USER" "$GIT_PASS" "$GIT_DIRECT_CREDENTIAL" "$PROJECT_PATH" "$PROJECT_NAME"
        ;;
    --git-pull)
        git_pull "$2" "$3" "$4"
        ;;
    --install-script)
        install_project "$2" "$3"
        ;;
    --create-systemd-unit)
        create_systemd_unit "$2"
        ;;
    --run-command)
        run-command "$@"
        ;;
    -cpu|--cpu-utilization)
        cpu_utilization_percentage
        ;;
    -um|--used-memory)
        memory_status used
        ;;
    -am|--available-memory)
        memory_status available
        ;;
    -tm|--total-memory)
        memory_status total
        ;;
    --redis-set)
        redis_collect
        ;;
	-v|--version)
		echo -e "Version: $VERSION"
		;;
	-h|--help)
		usage
		exit 0
		;;
    --test)
        test_fun "$2"
        exit 123
#        return 100
        ;;
	*)
		echo -e "$1 is not an option. \n "
		usage
		exit 7
esac

